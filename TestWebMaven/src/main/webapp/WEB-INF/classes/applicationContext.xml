<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx" xmlns:ehcache="http://ehcache-spring-annotations.googlecode.com/svn/schema/ehcache-spring"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
						http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
						http://www.springframework.org/schema/context 
						http://www.springframework.org/schema/context/spring-context-3.0.xsd
						http://www.springframework.org/schema/aop 
						http://www.springframework.org/schema/aop/spring-aop-3.0.xsd 
						http://www.springframework.org/schema/tx 
						http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
						http://ehcache-spring-annotations.googlecode.com/svn/schema/ehcache-spring   
						http://ehcache-spring-annotations.googlecode.com/svn/schema/ehcache-spring/ehcache-spring-1.1.xsd
						">
	
	<!-- 使用spring提供的PropertyPlaceholderConfigurer读取数据库配置信息.properties -->
	<bean id="placeholderConfig" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer" lazy-init="true">
		<property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE" />
		<!-- 忽略文件找不到 -->
		<property name="ignoreResourceNotFound" value="true" />
		<property name="locations">
			<list>
				<value>classpath:jdbc-mysql.properties</value>
			</list>
		</property>
	</bean>
	
	<!-- 数据库配置 -->
	<bean id="portalDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass">
			<value>${datasource.driverClassName}</value>
		</property>
		<property name="jdbcUrl">
			<value>jdbc:mysql://127.0.0.1:3306/test?useUnicode=true&amp;characterEncoding=UTF-8</value>
		</property>
		<property name="user">
			<value>root</value>
		</property>
		<property name="password">
			<value>root</value>
		</property>
		<property name="acquireIncrement">
			<value>3</value>
		</property>
		<property name="initialPoolSize">
			<value>${c3p0.initialPoolSize}</value>
		</property>
		<property name="minPoolSize">
			<value>${c3p0.minPoolSize}</value>
		</property>
		<property name="maxPoolSize">
			<value>50</value>
		</property>
		<property name="maxIdleTime">
			<value>${c3p0.maxIdleTime}</value>
		</property>
		<property name="idleConnectionTestPeriod">
			<value>900</value>
		</property>
		<property name="maxStatements">
			<value>${c3p0.maxStatements}</value>
		</property>
		<property name="numHelperThreads">
			<value>${c3p0.numHelperThreads}</value>
		</property>
	</bean>
	
	<!-- 如果hibernate3应该如此org.springframework.orm.hibernate3.HibernateTransactionManager -->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<property name="dataSource">
			<ref local="portalDataSource" />
		</property>
		<!-- Hibernate @Entity 注解加载   指定相应的包，避免全部扫描和避免在其它包中写实体类-->
		<property name="packagesToScan">
			<list>
				<value>com.whaty.products.web.*</value>
			</list>
		</property>
		<property name="hibernateProperties">
			<value>
				hibernate.dialect=${hibernate.dialect}
				hibernate.show_sql=${hibernate.show_sql}
				hibernate.format_sql=${hibernate.format_sql}
				hibernate.connection.autocommit=${hibernate.connection.autocommit}
				hibernate.jdbc.fetch_size=${hibernate.jdbc.fetch_size}
				hibernate.jdbc.batch_size=${hibernate.jdbc.batch_size}
				hibernate.cache.use_second_level_cache=true
				hibernate.cache.use_query_cache=true
				<!-- 如果升级Hibernate4这里缓存配置要改hibernate.cache.provider_class=net.sf.ehcache.hibernate.EhCacheProvider-->
				hibernate.cache.provider_class=net.sf.ehcache.hibernate.EhCacheProvider
			</value>
			<!--
			<props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.connection.autocommit">${hibernate.connection.autocommit}</prop>
				<prop key="hibernate.jdbc.fetch_size">${hibernate.jdbc.fetch_size}</prop>
				<prop key="hibernate.jdbc.batch_size">${hibernate.jdbc.batch_size}</prop>
				<prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
				<prop key="hibernate.cache.use_second_level_cache">true</prop>
				<prop key="hibernate.cache.use_query_cache">true</prop>
			</props>
			-->
		</property>
	</bean>

	<bean id="myTransactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory">
			<ref local="sessionFactory" />
		</property>
	</bean>

  	<!-- 非注解形式事务支持，代理事务管理 -->
	<bean id="txProxyTemplate" class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean" abstract="true" lazy-init="true">
		<property name="transactionManager">
			<ref bean="myTransactionManager" />
		</property>
		<property name="transactionAttributes">
			<props>
				<prop key="create*">PROPAGATION_REQUIRED,-java.lang.Exception</prop>
				<prop key="save*">PROPAGATION_REQUIRED,-java.lang.Exception</prop>
				<prop key="remove*">PROPAGATION_REQUIRED,-java.lang.Exception</prop>
				<prop key="update*">PROPAGATION_REQUIRED,-java.lang.Exception</prop>
				<prop key="del*">PROPAGATION_REQUIRED,-java.lang.Exception</prop>
			</props>
		</property>
	</bean>
	
	<!-- 使用annotation 自动注册bean,并检查@Required,@Autowired的属性已被注入 -->
	<context:component-scan base-package="com" />
	<!-- proxy-target-class默认值为false，基于接口的代理(jdk)，否则是基于类的代理(cglib) -->
	<aop:aspectj-autoproxy proxy-target-class="true" />
	<aop:config proxy-target-class="true" />

	<tx:annotation-driven proxy-target-class="true" transaction-manager="myTransactionManager" />
	
	<!--定义一个事务通知txAdvice,配置事务的传播特性-->
	<tx:advice id="transactionAdvice" transaction-manager="myTransactionManager">
		<tx:attributes>
			<!--所有以merge、save、add、delete、update、exe、do开头的业务逻辑方法均需要事务控制，如果当前没有事务，则新建一个事务，其他所有方法均只读-->
			<tx:method name="merge*" propagation="REQUIRED" />
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="exe*" propagation="REQUIRED" />
			<tx:method name="do*" propagation="REQUIRED" />
			<tx:method name="*" read-only="true" />
		</tx:attributes>
	</tx:advice>

	<!-- 添加service层事务支持 下面是详细说明-->
	<!--
		第一个*代表任何返回值  
		com.whaty.products.web.service..*代表你要拦截service目录下的以及子目录下的所有类
		.*(..)：这个代表任意方法，就是说上面那些类的任意方法，（）里面的点，代表任意参数
	-->
	<aop:config>
		<aop:advisor pointcut="execution(* com.whaty.products.web.service..*.*(..))" advice-ref="transactionAdvice" />
	</aop:config>
	<aop:config>
		<aop:advisor pointcut="execution(* com.whaty.products.*.service..*.*(..))" advice-ref="transactionAdvice" />
	</aop:config>
	<!-- end -->

</beans>

